doctype html
html
 head
  meta(charset='UTF-8')
  meta(name='viewport' content='width=device-width, initial-scale=1')
  link(rel='shortcut icon' type='image/x-icon' href='favicon.ico')
  title TAG 2018/2019 - David y Javier
  link(rel='stylesheet' href='style.css' type='text/css' media='screen')
  // Código JS para los controles básicos de la página web
  script(src='manejar_controles_basicos.js' defer)
  // WebGL para el proyecto
  script(src='js/gl-matrix-min.js')
  script(src='js/twgl-full.min.js')
  script(src='manejar_motor_grafico.js' type='module')
  script#vs(type='notjs').
    #version 300 es
    precision highp float;
    in vec4 a_position;
    in vec2 a_texcoord;
    in vec3 a_normal;
    
    uniform vec3 lightposition;
    uniform mat4 modelmatrix;
    uniform mat4 mvp;
    uniform mat4 normalmatrix;
    
    // Pass to fragment shader
    out vec2 v_texcoord;
    out vec3 Normal;
    out vec3 surfaceToLight;
    
    void main(void) {
      v_texcoord = a_texcoord;
      vec3 surfaceWorldPosition = (modelmatrix * a_position).xyz; 
      
      // Pass the normal to the fragment shader
      Normal = mat3(normalmatrix) * a_normal;
      
      surfaceToLight = vec3(lightposition) - surfaceWorldPosition;
      gl_Position = mvp * a_position;
    }
  script#fs(type='notjs').
    #version 300 es
    precision mediump float;

    // Passed in from vertex shader.
    in vec2 v_texcoord;
    in vec3 Normal;
    in vec3 surfaceToLight;

    uniform vec4 u_color;

    out vec4 outColor;
    void main(void) {
      vec3 normal2 = normalize(Normal);
      vec3 surfaceToLightDirection = normalize(surfaceToLight);

      float light = dot(normal2, surfaceToLightDirection);
      
      outColor = u_color;
      
      // Asi tenemos colores aleatorios en cada cara.
      outColor = vec4(v_texcoord, 1.0, 1.0);

      outColor.rgb *= light;
    }

  body
    block content
